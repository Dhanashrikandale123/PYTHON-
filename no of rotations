#You are given list of numbers, obtained by rotating a sorted list an unknown number of times. 
#Write a function to determine the minimum number of times the original sorted list was rotated to obtain the given list. 
#Your function should have the worst-case complexity of 0(log N), where N is the length of the list.
#You can assume that all the numbers in the list are unique.
#Example: The list [5, 6, 9, 0, 2, 3, 4] was obtained by rotating the sorted list [0, 2, 3, 4, 5, 6, 9] 3 times.
#We define "rotating a list" as removing the last element of the list and adding it before the first element. 
#E.g. rotating the list [3, 2, 4, 1] produces [1, 3, 2, 4].
#"Sorted list" refers to a list where the elements are arranged in the increasing order e.g. [1, 3, 5, 7].
num=[19,25,29,3,5,6,7,9,11,14]
or
num=list(map(int,input().split(" ")))
print(num)
def count_rotations_linear(num):
    position=0
    while position<len(num):
        if position >0 and num[position]<num[position-1]:
            return position
        position+=1
result=print("rotations are",count_rotations_linear(num))
 
    
